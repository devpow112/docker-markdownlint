name: Release
on:
  push:
    branches: main
concurrency: release
permissions:
  contents: read
jobs:
  ci:
    name: CI
    permissions:
      contents: read
    uses: ./.github/workflows/ci.yml
  cd:
    name: CD
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      packages: write
    needs:
      - ci
    services:
      registry:
        image: registry
        ports:
          - 5000:5000
    env:
      PACKAGE: ghcr.io/${{github.repository_owner}}/base-ubuntu
      PACKAGE_TEMP: localhost:5000/${{github.repository_owner}}/base-ubuntu
      PLATFORMS: linux/amd64,linux/arm/v7,linux/arm64,linux/ppc64le
      CACHE_FROM: type=local,src=/tmp/.buildx-cache
      CACHE_TO: type=local,mode=max,dest=/tmp/.buildx-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
        with:
          platforms: ${{env.PLATFORMS}}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.6.0
        with:
          driver-opts: network=host
          version: latest
      - name: Set up cache
        uses: actions/cache@v2.1.7
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{hashFiles('Dockerfile', '.dockerignore', 'root/**')}}
          restore-keys: buildx-
      - name: Build image
        uses: docker/build-push-action@v2.9.0
        id: build
        with:
          builder: ${{steps.buildx.outputs.name}}
          context: .
          platforms: ${{env.PLATFORMS}}
          tags: ${{env.PACKAGE_TEMP}}
          cache-from: ${{env.CACHE_FROM}}
          cache-to: ${{env.CACHE_TO}}
          push: true
      - name: Determine info
        id: info
        shell: bash
        run: |
          DIGEST=$(
            docker buildx imagetools inspect $PACKAGE_TEMP |
            grep Digest | cut -c12-
          )
          DIGEST_LATEST=$(
            docker buildx imagetools inspect $PACKAGE |
            grep Digest | cut -c12-
          )
          echo "Digest New (Docker): $DIGEST"
          echo "Digest Old (Docker): $DIGEST_LATEST"
          if [ "$DIGEST" == "$DIGEST_LATEST" ]; then
            echo 'Create Release (GitHub): false'
            exit 0
          fi
          echo 'Create Release (GitHub): true'
          DATE=$(date +%Y%m%d)
          STREAM=$(
            grep -E "^FROM ubuntu:[a-z]+-[0-9]+$" Dockerfile |
            cut -d: -f2 | cut -d- -f1
          )
          URL=https://api.github.com/repos/${{github.repository}}/releases
          RELEASES=$(curl -sSL $URL)
          TAG_PREFIX="$STREAM-$DATE"
          EXPRESSION="[.[].tag_name|select(startswith(\"$TAG_PREFIX\"))]"
          EXPRESSION="$EXPRESSION|max//\"\"|split(\".\")[1]//\"-1\""
          BUILD_NUMBER=$(echo "$RELEASES" | jq -r $EXPRESSION)
          BUILD_NUMBER=$((BUILD_NUMBER + 1))
          RELEASE_TAG="$TAG_PREFIX.$BUILD_NUMBER"
          DOCKER_TAGS="$PACKAGE:latest"
          DOCKER_TAGS="$DOCKER_TAGS,$PACKAGE:$RELEASE_TAG"
          RELEASE_COMMIT=$(echo ${GITHUB_REF#refs/heads/})
          EXPRESSION="[.[]|select(.target_commitish==\"$RELEASE_COMMIT\")"
          EXPRESSION="$EXPRESSION|{tag_name:.tag_name,created_at:.created_at}]"
          EXPRESSION="$EXPRESSION|sort_by(.created_at,.tag_name)"
          EXPRESSION="$EXPRESSION|max|.tag_name//\"\""
          TAG=$(echo "$RELEASES" | jq -r $EXPRESSION)
          if [ -z "$TAG" ]; then
            COMMIT_RANGE='origin/main...HEAD'
          else
            COMMIT_RANGE="$TAG...HEAD"
          fi
          FORMAT_URL='https://github.com/${{github.repository}}/commit/%H'
          FORMAT="* %s ([\`%h\`]($FORMAT_URL))"
          RELEASE_BODY=$(git log $COMMIT_RANGE --pretty=format:"$FORMAT" | sort)
          echo "Tag (Git): $RELEASE_TAG"
          echo "Previous Tag (Git): $TAG"
          echo "Commit Range (Git): $COMMIT_RANGE"
          echo "Commitish (GitHub): $RELEASE_COMMIT"
          echo 'Commit (Git): ${{github.sha}}'
          echo "Tags (Docker): $DOCKER_TAGS"
          echo -e "Release Notes (GitHub):\n$RELEASE_BODY"
          if [ -z "$RELEASE_BODY" ]; then
            echo 'Uh oh...ðŸ˜§ something went wrong when determining release info'
            echo 'The digest changed but no changes were found ðŸ˜•'
            exit 1
          fi
          RELEASE_BODY="${RELEASE_BODY//'%'/'%25'}"
          RELEASE_BODY="${RELEASE_BODY//$'\n'/'%0A'}"
          RELEASE_BODY="${RELEASE_BODY//$'\r'/'%0D'}"
          echo '::set-output name=create-release::true'
          echo "::set-output name=release-tag::$RELEASE_TAG"
          echo "::set-output name=release-commit::$RELEASE_COMMIT"
          echo "::set-output name=release-body::$RELEASE_BODY"
          echo "::set-output name=docker-tags::$DOCKER_TAGS"
      - name: Create release
        if: steps.info.outputs.create-release
        uses: ncipollo/release-action@v1.9.0
        with:
          tag: ${{steps.info.outputs.release-tag}}
          body: ${{steps.info.outputs.release-body}}
          commit: ${{steps.info.outputs.release-commit}}
          token: ${{secrets.AUTOMATION_TOKEN}}
      - name: Login to registry
        if: steps.info.outputs.create-release
        uses: docker/login-action@v1.12.0
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{github.token}}
      - name: Push image
        if: steps.info.outputs.create-release
        uses: docker/build-push-action@v2.9.0
        with:
          builder: ${{steps.buildx.outputs.name}}
          context: .
          platforms: ${{env.PLATFORMS}}
          tags: ${{steps.info.outputs.docker-tags}}
          cache-from: ${{env.CACHE_FROM}}
          cache-to: ${{env.CACHE_TO}}
          push: true
